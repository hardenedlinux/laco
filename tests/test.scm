(define-module (tests)
  #:use-module (srfi srfi-64)
  #:use-module (rnrs)
  #:use-module (laco compile))

(define (lambdachip-run name)
  (let ((tf (format #f "tests/scm/~a.scm" name)))
    (when (not (file-exists? tf))
      (format #t "The test file `~a' is missing!" tf)
      (exit -1))
    (let ((vm (getenv "LAMBDACHIP_VM_PATH"))
          (lef (format #f "/tmp/~a.lef" name)))
      (when (not vm)
        (format #t "Please set LAMBDACHIP_VM_PATH then try again!")
        (exit -2))
      (system (format #f "./pre-inst-env scripts/laco ~a -o ~a >/dev/null" tf lef))
      (system (format #f "~a/lambdachip-vm ~a > /tmp/~a.log" vm lef name))
      (call-with-input-file (format #f "/tmp/~a.log" name) get-string-all))))

(define (get-result name)
  (call-with-input-file (format #f "tests/result/~a.txt" name) get-string-all))

(define (check case name)
  (test-equal case
    (get-result name)
    (lambdachip-run name)))

(test-begin "test-suite")

(check "Add" "add")
(check "Rational Division" "rational-division")
(check "Fibonacci Sequence" "fibonacci")
(check "Factorial" "factorial")
(check "Nested calling" "nested-call")
(check "Simple sequence printing" "simple-seq-print")
(check "GCD" "gcd")
(check "Symbol list" "symbol-list")
(check "Fold branch 1" "fold-branch-1")
(check "Fold branch 2" "fold-branch-2")
(check "Branch 1" "branch-1")
(check "define* keys" "define-star-keys")
(check "define* optionals" "define-star-opts")
(check "define* keys and -opts" "define-star-keys-opts")
(check "Constant keyword printing" "keyword-print")
(check "let test 1" "let-1")
(check "let* test 1" "let-star-1")
(check "pair print" "pair-print")
(check "pair car cdr" "pair-car-cdr")
(check "list append" "list-append")
(check "list car cdr" "list-car-cdr")
(check "char print" "char-print")

(test-end "test-suite")
