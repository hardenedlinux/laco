(hall-description
 (name "laco")
 (prefix "")
 (version "0.4.4")
 (author "Mu Lei known as NalaGinrut")
 (copyright (2021))
 (synopsis "Lambda Compiler")
 (description
  "Laco is a r7rs Scheme compiler for Animula VM which is designed for functional programming on embedded system.")
 (home-page "https://gitlab.com/HardenedLinux/laco")
 (license gpl3+)
 (dependencies `(("guile" ,guile-3.0)))
 (skip ())
 (files (libraries
         ((directory
           "laco"
           ((directory
             "assembler"
             ((compiled-scheme-file "encode")
              (compiled-scheme-file "sasm")
              (scheme-file "sasm")
              (scheme-file "encode")))
            (directory
             "lpass"
             ((compiled-scheme-file "closure-capture-fv")
              (compiled-scheme-file "fv-lifting")
              (compiled-scheme-file "remove-unused-captures")
              (scheme-file "remove-unused-captures")
              (scheme-file "fv-lifting")
              (scheme-file "closure-capture-fv")))
            (directory
             "pass"
             ((compiled-scheme-file "closure-conversion")
              (compiled-scheme-file "normalize")
              (compiled-scheme-file "elre")
              (compiled-scheme-file "tco")
              (compiled-scheme-file "lambda-lifting")
              (compiled-scheme-file "func-inline")
              (compiled-scheme-file "delta-reduction")
              (compiled-scheme-file "const-propagation")
              (compiled-scheme-file "eta-cont")
              (compiled-scheme-file "fold-const")
              (compiled-scheme-file "args-extend")
              (compiled-scheme-file "fold-branch")
              (compiled-scheme-file "escape-analysis")
              (compiled-scheme-file "primitive-conversion")
              (compiled-scheme-file "useless-constant")
              (compiled-scheme-file "useless-cont")
              (compiled-scheme-file "eta-func")
              (compiled-scheme-file "dce")
              (compiled-scheme-file "effect-analysis")
              (scheme-file "useless-cont")
              (scheme-file "useless-constant")
              (scheme-file "tco")
              (scheme-file "primitive-conversion")
              (scheme-file "normalize")
              (scheme-file "lambda-lifting")
              (scheme-file "func-inline")
              (scheme-file "fold-const")
              (scheme-file "fold-branch")
              (scheme-file "eta-func")
              (scheme-file "eta-cont")
              (scheme-file "escape-analysis")
              (scheme-file "elre")
              (scheme-file "effect-analysis")
              (scheme-file "delta-reduction")
              (scheme-file "dce")
              (scheme-file "const-propagation")
              (scheme-file "closure-lifting")
              (scheme-file "closure-conversion")
              (scheme-file "args-extend")
              (compiled-scheme-file "closure-lifting")))
            (directory
             "records"
             ((compiled-scheme-file "procedural")
              (compiled-scheme-file "syntactic")
              (scheme-file "syntactic")
              (scheme-file "procedural")))
            (scheme-file "types")
            (scheme-file "pass")
            (scheme-file "parser")
            (scheme-file "openai")
            (scheme-file "cps")
            (scheme-file "compile")
            (scheme-file "ast")
            (scheme-file "assembler")
            (compiled-scheme-file "openai")
            (compiled-scheme-file "cps")
            (compiled-scheme-file "lir")
            (compiled-scheme-file "primitives")
            (compiled-scheme-file "parser")
            (compiled-scheme-file "compile")
            (compiled-scheme-file "codegen")
            (compiled-scheme-file "object")
            (compiled-scheme-file "sasm")
            (compiled-scheme-file "utils")
            (compiled-scheme-file "ast")
            (compiled-scheme-file "pass")
            (compiled-scheme-file "env")
            (compiled-scheme-file "types")
            (compiled-scheme-file "module")
            (compiled-scheme-file "assembler")
            (compiled-scheme-file "records")
            (scheme-file "utils")
            (scheme-file "sasm")
            (scheme-file "records")
            (scheme-file "primitives")
            (scheme-file "object")
            (scheme-file "module")
            (scheme-file "lir")
            (scheme-file "env")
            (scheme-file "codegen")))
          (scheme-file "laco")))
        (tests ((directory
                 "tests"
                 ((directory
                   "result"
                   ((unknown-type "var-list.txt")
                    (unknown-type "symbol-list.txt")
                    (unknown-type "simple-seq-print.txt")
                    (unknown-type "redefine.txt")
                    (unknown-type "rational-division.txt")
                    (unknown-type "rational-1.txt")
                    (unknown-type "raise.txt")
                    (unknown-type "raise-cont.txt")
                    (unknown-type "pair.txt")
                    (unknown-type "or-test.txt")
                    (unknown-type "numbers.txt")
                    (unknown-type "null.txt")
                    (unknown-type "nested-lambda-1.txt")
                    (unknown-type "nested-call.txt")
                    (unknown-type "named-let-narg-in-func.txt")
                    (unknown-type "named-let-loop.txt")
                    (unknown-type "named-let-loop-in-func.txt")
                    (unknown-type "named-let-3.txt")
                    (unknown-type "named-let-2.txt")
                    (unknown-type "named-let-1.txt")
                    (unknown-type "multiply.txt")
                    (unknown-type "local-def-4.txt")
                    (unknown-type "local-def-3.txt")
                    (unknown-type "local-def-2.txt")
                    (unknown-type "local-def-1.txt")
                    (unknown-type "list_to_string.txt")
                    (unknown-type "list-ref.txt")
                    (unknown-type "list-print.txt")
                    (unknown-type "list-car-cdr.txt")
                    (unknown-type "list-append.txt")
                    (unknown-type "let-star-side-effect-1.txt")
                    (unknown-type "let-star-optimized-out.txt")
                    (unknown-type "let-star-1.txt")
                    (unknown-type "let-1.txt")
                    (unknown-type "lambda-lifting-2.txt")
                    (unknown-type "lambda-lifting-1.txt")
                    (unknown-type "lambda-app-multi-args.txt")
                    (unknown-type "keyword-print.txt")
                    (unknown-type "int-list.txt")
                    (unknown-type "global-list-1.txt")
                    (unknown-type "global-expr-1.txt")
                    (unknown-type "gcd.txt")
                    (unknown-type "fold-branch-2.txt")
                    (unknown-type "fold-branch-1.txt")
                    (unknown-type "fibonacci.txt")
                    (unknown-type "factorial.txt")
                    (unknown-type "expr-in-mid-defs.txt")
                    (unknown-type "eq_gt_lt.txt")
                    (unknown-type "define-star-opts.txt")
                    (unknown-type "define-star-keys.txt")
                    (unknown-type "define-star-keys-opts.txt")
                    (unknown-type "closure-2.txt")
                    (unknown-type "closure-1.txt")
                    (unknown-type "char-print.txt")
                    (unknown-type "bytevector.txt")
                    (unknown-type "branch-2.txt")
                    (unknown-type "branch-1.txt")
                    (unknown-type "applicative-order-1.txt")
                    (unknown-type "and-test.txt")
                    (unknown-type "add_sub.txt")))
                  (directory
                   "scm"
                   ((scheme-file "var-list")
                    (scheme-file "symbol-list")
                    (scheme-file "simple-seq-print")
                    (scheme-file "redefine")
                    (scheme-file "rational-division")
                    (scheme-file "rational-1")
                    (scheme-file "raise")
                    (scheme-file "raise-cont")
                    (scheme-file "pair")
                    (scheme-file "or-test")
                    (scheme-file "numbers")
                    (scheme-file "null")
                    (scheme-file "nested-lambda-1")
                    (scheme-file "nested-call")
                    (scheme-file "named-let-narg-in-func")
                    (scheme-file "named-let-loop")
                    (scheme-file "named-let-loop-in-func")
                    (scheme-file "named-let-3")
                    (scheme-file "named-let-2")
                    (scheme-file "named-let-1")
                    (scheme-file "multiply")
                    (scheme-file "local-def-4")
                    (scheme-file "local-def-3")
                    (scheme-file "local-def-2")
                    (scheme-file "local-def-1")
                    (scheme-file "list_to_string")
                    (scheme-file "list-ref")
                    (scheme-file "list-print")
                    (scheme-file "list-car-cdr")
                    (scheme-file "list-append")
                    (scheme-file "let-star-side-effect-1")
                    (scheme-file "let-star-optimized-out")
                    (scheme-file "let-star-1")
                    (scheme-file "let-1")
                    (scheme-file "lambda-lifting-2")
                    (scheme-file "lambda-lifting-1")
                    (scheme-file "lambda-app-multi-args")
                    (scheme-file "keyword-print")
                    (scheme-file "int-list")
                    (scheme-file "global-list-1")
                    (scheme-file "global-expr-1")
                    (scheme-file "gcd")
                    (scheme-file "fold-branch-2")
                    (scheme-file "fold-branch-1")
                    (scheme-file "fibonacci")
                    (scheme-file "factorial")
                    (scheme-file "expr-in-mid-defs")
                    (scheme-file "eq_gt_lt")
                    (scheme-file "define-star-opts")
                    (scheme-file "define-star-keys")
                    (scheme-file "define-star-keys-opts")
                    (scheme-file "closure-2")
                    (scheme-file "closure-1")
                    (scheme-file "char-print")
                    (scheme-file "bytevector")
                    (scheme-file "branch-2")
                    (scheme-file "branch-1")
                    (scheme-file "applicative-order-1")
                    (scheme-file "and-test")
                    (scheme-file "add_sub")))
                  (scheme-file "test")))))
        (programs
         ((directory "scripts" ((text-file "laco") (in-file "laco")))))
        (documentation
         ((text-file "ChangeLog")
          (text-file "AUTHORS")
          (text-file "NEWS")
          (directory
           "doc"
           ((texi-file "version")
            (info-file "version")
            (text-file "version")
            (texi-file "laco")
            (info-file "laco")
            (text-file "laco")
            (text-file ".dirstamp")))
          (text-file "COPYING")
          (text-file "HACKING")
          (symlink "README" "README.md")))
        (infrastructure
         ((in-file "pre-inst-env")
          (automake-file "Makefile")
          (autoconf-file "configure")
          (directory
           "build-aux"
           ((tex-file "texinfo")
            (scheme-file "test-driver")
            (text-file "missing")
            (text-file "mdate-sh")
            (text-file "install-sh")))
          (scheme-file "hall")
          (scheme-file "guix")))))
